// This file was generated with Diez - https://diez.org
// Do not edit this file directly.

module.exports = {};

if (typeof process === 'undefined' || !process) {
  process = {env: {}};
} else if (!process.env) {
  Object.defineProperty(process, 'env', {
    value: {},
  });
}

const Environment = {
  serverUrl: process.env.DIEZ_SERVER_URL || '/diez',
  isHot: process.env.DIEZ_IS_HOT,
};

const diezHTMLExtensions = [];

class Diez {
  constructor (componentType) {
    if (typeof document !== 'undefined') {
      this.iframe = document.createElement('iframe');
    } else {
      this.iframe = {};
    }

    this.componentType = componentType;
    this.component = new this.componentType();
    this.subscribers = [];
  }

  static applyHTMLExtensions () {
    diezHTMLExtensions.forEach((extension) => {
      if (extension instanceof Function) {
        extension();
      }
    });
  }

  broadcast () {
    for (const subscriber of this.subscribers) {
      subscriber(this.component);
    }
  }

  subscribe (subscriber) {
    this.subscribers.push(subscriber);
  }

  attach (subscriber) {
    subscriber(this.component);
    if (!Environment.isHot) {
      return;
    }
    this.subscribe(subscriber);
    if (this.iframe.contentWindow) {
      return;
    }
    this.iframe.src = `${Environment.serverUrl}/components/${this.component.constructor.name}`;
    this.iframe.width = '0';
    this.iframe.height = '0';
    this.iframe.style.display = 'none';

    if (typeof document !== 'undefined') {
      document.body.appendChild(this.iframe);
      window.addEventListener('message', (event) => {
        if (event.source === this.iframe.contentWindow && event.origin.startsWith(Environment.serverUrl)) {
          this.component = new this.componentType(JSON.parse(event.data));
          this.broadcast();
        }
      });
    }
  }
}

module.exports.Diez = Diez;

/**
 * A component encapsulating color, including alpha transparency.
 * 
 * You can use the provided static constructors [[Color.rgb]], [[Color.rgba]], [[Color.hsl]], [[Color.hsla]], and
 * [[Color.hex]] to conveniently create color primitives using familiar patterns for color specification.
 *
 */
class Color {
  constructor({
    h,
    s,
    l,
    a
  }) {
    /**
     * Provides simple hue-saturation-lightness-alpha color data.
     *
     * 0.6222222222222221
     */
    this.h = h;
    /**
     * Provides simple hue-saturation-lightness-alpha color data.
     *
     * 1
     */
    this.s = s;
    /**
     * Provides simple hue-saturation-lightness-alpha color data.
     *
     * 0.9705882352941176
     */
    this.l = l;
    /**
     * Provides simple hue-saturation-lightness-alpha color data.
     *
     * 1
     */
    this.a = a;
  }
}


module.exports.Color = Color;

const {colorToCss} = require('@diez/web-sdk-common');

Object.defineProperties(Color.prototype, {
  color: {
    get () {
      return colorToCss(this);
    },
  },
  colorStyle: {
    get () {
      return {
        color: this.color,
      };
    },
  },
  backgroundColorStyle: {
    get () {
      return {
        backgroundColor: this.color,
      };
    },
  },
  borderColorStyle: {
    get () {
      return {
        borderColor: this.color,
      };
    },
  },
  outlineColorStyle: {
    get () {
      return {
        outlineColor: this.color,
      };
    },
  },
});

/**
 * You can reference properties from other components.
 *
 */
class Palette {
  constructor({
    background = {h: 0.6222222222222221, s: 1, l: 0.9705882352941176, a: 1},
    cardBackground = {h: 0, s: 0, l: 1, a: 1},
    textPrimary = {h: 0, s: 0, l: 0.2, a: 1},
    textSecondary = {h: 0, s: 0, l: 0.5098039215686274, a: 1},
    textTertiary = {h: 0, s: 0, l: 0.7411764705882353, a: 1},
    textDarkContrast = {h: 0, s: 0, l: 1, a: 1},
    textHighEmphasis = {h: 0.621301775147929, s: 0.832512315270936, l: 0.6019607843137255, a: 1},
    textLowEmphasis = {h: 0.6666666666666666, s: 0.5401069518716577, l: 0.3666666666666667, a: 1},
    primaryColor = {h: 0.621301775147929, s: 0.832512315270936, l: 0.6019607843137255, a: 1},
    primaryColorLigth = {h: 0.6222222222222221, s: 1, l: 0.9705882352941176, a: 1},
    secondaryColor = {h: 0.6666666666666666, s: 0.5401069518716577, l: 0.3666666666666667, a: 1},
    tertiaryColor = {h: 0.6164874551971326, s: 0.8691588785046729, l: 0.20980392156862746, a: 1},
    redColor = {h: 0, s: 0.7872340425531912, l: 0.6313725490196078, a: 1},
    orangeColor = {h: 0.07837301587301587, s: 0.8659793814432989, l: 0.6196078431372549, a: 1},
    yellowColor = {h: 0.12550200803212852, s: 0.8645833333333333, l: 0.6235294117647059, a: 1},
    greenColor = {h: 0.4037037037037037, s: 0.6338028169014084, l: 0.4176470588235294, a: 1}
  } = {}) {
    /**
     * `Colors.primaryLigth` ( hsla(0.62, 1, 0.97, 1) )
     */
    this.background = new Color(background);
    /**
     * `Colors.white` ( hsla(0, 0, 1, 1) )
     */
    this.cardBackground = new Color(cardBackground);
    /**
     * `Colors.black` ( hsla(0, 0, 0.2, 1) )
     */
    this.textPrimary = new Color(textPrimary);
    /**
     * `Colors.gray3` ( hsla(0, 0, 0.51, 1) )
     */
    this.textSecondary = new Color(textSecondary);
    /**
     * `Colors.gray4` ( hsla(0, 0, 0.74, 1) )
     */
    this.textTertiary = new Color(textTertiary);
    /**
     * `Colors.white` ( hsla(0, 0, 1, 1) )
     */
    this.textDarkContrast = new Color(textDarkContrast);
    /**
     * `Colors.primary` ( hsla(0.62, 0.83, 0.6, 1) )
     */
    this.textHighEmphasis = new Color(textHighEmphasis);
    /**
     * `Colors.secondary` ( hsla(0.67, 0.54, 0.37, 1) )
     */
    this.textLowEmphasis = new Color(textLowEmphasis);
    /**
     * `Colors.primary` ( hsla(0.62, 0.83, 0.6, 1) )
     */
    this.primaryColor = new Color(primaryColor);
    /**
     * `Colors.primaryLigth` ( hsla(0.62, 1, 0.97, 1) )
     */
    this.primaryColorLigth = new Color(primaryColorLigth);
    /**
     * `Colors.secondary` ( hsla(0.67, 0.54, 0.37, 1) )
     */
    this.secondaryColor = new Color(secondaryColor);
    /**
     * `Colors.tertiary` ( hsla(0.62, 0.87, 0.21, 1) )
     */
    this.tertiaryColor = new Color(tertiaryColor);
    /**
     * `Colors.red` ( hsla(0, 0.79, 0.63, 1) )
     */
    this.redColor = new Color(redColor);
    /**
     * `Colors.orange` ( hsla(0.08, 0.87, 0.62, 1) )
     */
    this.orangeColor = new Color(orangeColor);
    /**
     * `Colors.yellow` ( hsla(0.13, 0.86, 0.62, 1) )
     */
    this.yellowColor = new Color(yellowColor);
    /**
     * `Colors.green2` ( hsla(0.4, 0.63, 0.42, 1) )
     */
    this.greenColor = new Color(greenColor);
  }
}


module.exports.Palette = Palette;

/**
 * Provides a container for referencing local assets, which can be bridged by compilers to embed images, SVGs,
 * and more. This component is used internally by [[Image]] and [[Font]].
 * 
 * The compiler may enforce certain restrictions on the `type` of a `File` instance.
 * 
 * Usage: `file = new File({src: 'assets/images/file.jpg', type: FileType.Image});`.
 *
 */
class File {
  constructor({
    src,
    type
  }) {
    /**
     * File data.
     *
     * assets/Design.figma.contents/fonts/Montserrat-SemiBold.otf
     */
    this.src = src;
    /**
     * File data.
     *
     * font
     */
    this.type = type;
  }
}


module.exports.File = File;

Object.defineProperties(File.prototype, {
  url: {
    get () {
      return `${Environment.serverUrl}/${this.src}`;
    },
  },
});

/**
 * A representation of a font resource, with a reference to a [[File]] containing a TTF or OTF font file.
 *
 */
class Font {
  constructor({
    file,
    name,
    fallbacks,
    weight,
    style
  }) {
    /**
     * Font data.
     *
     * assets/Design.figma.contents/fonts/Montserrat-SemiBold.otf
     */
    this.file = new File(file);
    /**
     * Font data.
     *
     * Montserrat-SemiBold
     */
    this.name = name;
    /**
     * Font data.
     *
     * [sans-serif]
     */
    this.fallbacks = fallbacks;
    /**
     * Font data.
     *
     * 400
     */
    this.weight = weight;
    /**
     * Font data.
     *
     * normal
     */
    this.style = style;
  }
}


module.exports.Font = Font;

/**
 * Describes a typograph including specification of a font name (understood to specify both a font face and a font
 * weight) as well as a font size in device-local units and a font color.
 *
 */
class Typograph {
  constructor({
    font,
    fontSize,
    color,
    lineHeight,
    letterSpacing,
    alignment,
    decoration
  }) {
    /**
     * Typograph data.
     *
     * Montserrat-SemiBold, 400, normal
     */
    this.font = new Font(font);
    /**
     * Typograph data.
     *
     * 48
     */
    this.fontSize = fontSize;
    /**
     * Typograph data.
     *
     * hsla(0, 0, 0.2, 1)
     */
    this.color = new Color(color);
    /**
     * Typograph data.
     *
     * -1
     */
    this.lineHeight = lineHeight;
    /**
     * Typograph data.
     *
     * 0
     */
    this.letterSpacing = letterSpacing;
    /**
     * Typograph data.
     *
     * natural
     */
    this.alignment = alignment;
    /**
     * Typograph data.
     *
     * []
     */
    this.decoration = decoration;
  }
}


module.exports.Typograph = Typograph;

const {fontToCss, FontFormats, textAlignmentToCss, textDecorationsToCss} = require('@diez/web-sdk-common');

let styleSheet;
let cache;

const registerFont = (font) => {
  if (!styleSheet || !cache) {
    const styleEl = document.createElement('style');
    document.head.appendChild(styleEl);
    styleSheet = styleEl.sheet;
    cache = new Set();
  }

  if (cache.has(font.file.src)) {
    return;
  }

  const format = font.file.src.split('.').pop();
  const rule = `
@font-face {
  font-family: '${font.name}';
  font-weight: ${font.weight};
  font-style: ${font.style};
  src: local('${font.name}'), url(${font.file.url}) format('${FontFormats[format] || format}');
}`;
  styleSheet.insertRule(rule);
  cache.add(font.file.src);
};

Object.defineProperties(Typograph.prototype, {
  fontFamily: {
    get () {
      registerFont(this.font);
      return fontToCss(this.font);
    },
  },
  style: {
    get () {
      const style = {
        fontFamily: this.fontFamily,
        fontWeight: this.font.fontWeight,
        fontStyle: this.font.fontStyle,
        fontSize: `${this.fontSize}px`,
        color: this.color.color,
        letterSpacing: `${this.letterSpacing}px`,
        textAlign: textAlignmentToCss(this.alignment),
        textDecoration: textDecorationsToCss(this.decoration),
      };
      if (this.lineHeight !== -1) {
        style.lineHeight = `${this.lineHeight}px`;
      }
      return style;
    },
  },
});

Typograph.prototype.applyStyle = function (ref) {
  const style = this.style;
  ref.style.fontFamily = style.fontFamily;
  ref.style.fontWeight = style.fontWeight;
  ref.style.fontStyle = style.fontStyle;
  ref.style.fontSize = style.fontSize;
  ref.style.color = style.color;
  ref.style.lineHeight = style.lineHeight;
  ref.style.letterSpacing = style.letterSpacing;
  ref.style.textAlign = style.textAlign;
};

diezHTMLExtensions.push(() => {
  HTMLElement.prototype.applyTypograph = (typograph) => {
    typograph.applyStyle(this);
  };
});

class DesignTypography {
  constructor({
    fontStyle10 = {font: {file: {src: "assets/Design.figma.contents/fonts/Montserrat-SemiBold.otf", type: "font"}, name: "Montserrat-SemiBold", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 48, color: {h: 0, s: 0, l: 0.2, a: 1}, lineHeight: -1, letterSpacing: 0, alignment: "natural", decoration: []},
    fontStyle9 = {font: {file: {src: "assets/Design.figma.contents/fonts/Montserrat-Bold.otf", type: "font"}, name: "Montserrat-Bold", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 36, color: {h: 0, s: 0, l: 0.2, a: 1}, lineHeight: -1, letterSpacing: 0, alignment: "natural", decoration: []},
    fontStyle8 = {font: {file: {src: "assets/Design.figma.contents/fonts/Inter-Medium.otf", type: "font"}, name: "Inter-Medium", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 32, color: {h: 0, s: 0, l: 0.2, a: 1}, lineHeight: -1, letterSpacing: 0, alignment: "natural", decoration: []},
    fontStyle7 = {font: {file: {src: "assets/Design.figma.contents/fonts/Inter-SemiBold.otf", type: "font"}, name: "Inter-SemiBold", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 24, color: {h: 0, s: 0, l: 0.2, a: 1}, lineHeight: -1, letterSpacing: 0, alignment: "natural", decoration: []},
    fontStyle4 = {font: {file: {src: "assets/Design.figma.contents/fonts/Inter-Regular.otf", type: "font"}, name: "Inter-Regular", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 16, color: {h: 0, s: 0, l: 0.2, a: 1}, lineHeight: -1, letterSpacing: 0, alignment: "natural", decoration: []},
    fontStyle3 = {font: {file: {src: "assets/Design.figma.contents/fonts/Inter-SemiBold.otf", type: "font"}, name: "Inter-SemiBold", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 14, color: {h: 0, s: 0, l: 0.2, a: 1}, lineHeight: -1, letterSpacing: 0, alignment: "natural", decoration: []},
    fontStyle2 = {font: {file: {src: "assets/Design.figma.contents/fonts/Inter-Medium.otf", type: "font"}, name: "Inter-Medium", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 12, color: {h: 0, s: 0, l: 0.2, a: 1}, lineHeight: -1, letterSpacing: 0, alignment: "natural", decoration: []},
    fontStyle1 = {font: {file: {src: "assets/Design.figma.contents/fonts/Inter-Regular.otf", type: "font"}, name: "Inter-Regular", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 10, color: {h: 0, s: 0, l: 0.2, a: 1}, lineHeight: -1, letterSpacing: 0, alignment: "natural", decoration: []},
    fontStyle12 = {font: {file: {src: "assets/Design.figma.contents/fonts/Montserrat-SemiBold.otf", type: "font"}, name: "Montserrat-SemiBold", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 96, color: {h: 0, s: 0, l: 0.2, a: 1}, lineHeight: -1, letterSpacing: 0, alignment: "natural", decoration: []},
    fontStyle11 = {font: {file: {src: "assets/Design.figma.contents/fonts/Montserrat-Bold.otf", type: "font"}, name: "Montserrat-Bold", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 64, color: {h: 0, s: 0, l: 0.2, a: 1}, lineHeight: -1, letterSpacing: 0, alignment: "natural", decoration: []},
    fontStyle6 = {font: {file: {src: "assets/Design.figma.contents/fonts/Inter-Medium.otf", type: "font"}, name: "Inter-Medium", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 20, color: {h: 0, s: 0, l: 0.2, a: 1}, lineHeight: -1, letterSpacing: 0, alignment: "natural", decoration: []},
    fontStyle5 = {font: {file: {src: "assets/Design.figma.contents/fonts/Inter-Bold.otf", type: "font"}, name: "Inter-Bold", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 18, color: {h: 0, s: 0, l: 0.2, a: 1}, lineHeight: -1, letterSpacing: 0, alignment: "natural", decoration: []}
  } = {}) {
    /**
     * - font: `Montserrat-SemiBold, 400, normal`
     * - fontSize: `48`
     * - color: `hsla(0, 0, 0.2, 1)`
     * - iosTextStyle: `body`
     * - shouldScale: `false`
     * - lineHeight: `-1`
     * - letterSpacing: `0`
     * - alignment: `natural`
     * - decoration: `[]`
     */
    this.fontStyle10 = new Typograph(fontStyle10);
    /**
     * - font: `Montserrat-Bold, 400, normal`
     * - fontSize: `36`
     * - color: `hsla(0, 0, 0.2, 1)`
     * - iosTextStyle: `body`
     * - shouldScale: `false`
     * - lineHeight: `-1`
     * - letterSpacing: `0`
     * - alignment: `natural`
     * - decoration: `[]`
     */
    this.fontStyle9 = new Typograph(fontStyle9);
    /**
     * - font: `Inter-Medium, 400, normal`
     * - fontSize: `32`
     * - color: `hsla(0, 0, 0.2, 1)`
     * - iosTextStyle: `body`
     * - shouldScale: `false`
     * - lineHeight: `-1`
     * - letterSpacing: `0`
     * - alignment: `natural`
     * - decoration: `[]`
     */
    this.fontStyle8 = new Typograph(fontStyle8);
    /**
     * - font: `Inter-SemiBold, 400, normal`
     * - fontSize: `24`
     * - color: `hsla(0, 0, 0.2, 1)`
     * - iosTextStyle: `body`
     * - shouldScale: `false`
     * - lineHeight: `-1`
     * - letterSpacing: `0`
     * - alignment: `natural`
     * - decoration: `[]`
     */
    this.fontStyle7 = new Typograph(fontStyle7);
    /**
     * - font: `Inter-Regular, 400, normal`
     * - fontSize: `16`
     * - color: `hsla(0, 0, 0.2, 1)`
     * - iosTextStyle: `body`
     * - shouldScale: `false`
     * - lineHeight: `-1`
     * - letterSpacing: `0`
     * - alignment: `natural`
     * - decoration: `[]`
     */
    this.fontStyle4 = new Typograph(fontStyle4);
    /**
     * - font: `Inter-SemiBold, 400, normal`
     * - fontSize: `14`
     * - color: `hsla(0, 0, 0.2, 1)`
     * - iosTextStyle: `body`
     * - shouldScale: `false`
     * - lineHeight: `-1`
     * - letterSpacing: `0`
     * - alignment: `natural`
     * - decoration: `[]`
     */
    this.fontStyle3 = new Typograph(fontStyle3);
    /**
     * - font: `Inter-Medium, 400, normal`
     * - fontSize: `12`
     * - color: `hsla(0, 0, 0.2, 1)`
     * - iosTextStyle: `body`
     * - shouldScale: `false`
     * - lineHeight: `-1`
     * - letterSpacing: `0`
     * - alignment: `natural`
     * - decoration: `[]`
     */
    this.fontStyle2 = new Typograph(fontStyle2);
    /**
     * - font: `Inter-Regular, 400, normal`
     * - fontSize: `10`
     * - color: `hsla(0, 0, 0.2, 1)`
     * - iosTextStyle: `body`
     * - shouldScale: `false`
     * - lineHeight: `-1`
     * - letterSpacing: `0`
     * - alignment: `natural`
     * - decoration: `[]`
     */
    this.fontStyle1 = new Typograph(fontStyle1);
    /**
     * - font: `Montserrat-SemiBold, 400, normal`
     * - fontSize: `96`
     * - color: `hsla(0, 0, 0.2, 1)`
     * - iosTextStyle: `body`
     * - shouldScale: `false`
     * - lineHeight: `-1`
     * - letterSpacing: `0`
     * - alignment: `natural`
     * - decoration: `[]`
     */
    this.fontStyle12 = new Typograph(fontStyle12);
    /**
     * - font: `Montserrat-Bold, 400, normal`
     * - fontSize: `64`
     * - color: `hsla(0, 0, 0.2, 1)`
     * - iosTextStyle: `body`
     * - shouldScale: `false`
     * - lineHeight: `-1`
     * - letterSpacing: `0`
     * - alignment: `natural`
     * - decoration: `[]`
     */
    this.fontStyle11 = new Typograph(fontStyle11);
    /**
     * - font: `Inter-Medium, 400, normal`
     * - fontSize: `20`
     * - color: `hsla(0, 0, 0.2, 1)`
     * - iosTextStyle: `body`
     * - shouldScale: `false`
     * - lineHeight: `-1`
     * - letterSpacing: `0`
     * - alignment: `natural`
     * - decoration: `[]`
     */
    this.fontStyle6 = new Typograph(fontStyle6);
    /**
     * - font: `Inter-Bold, 400, normal`
     * - fontSize: `18`
     * - color: `hsla(0, 0, 0.2, 1)`
     * - iosTextStyle: `body`
     * - shouldScale: `false`
     * - lineHeight: `-1`
     * - letterSpacing: `0`
     * - alignment: `natural`
     * - decoration: `[]`
     */
    this.fontStyle5 = new Typograph(fontStyle5);
  }
}


module.exports.DesignTypography = DesignTypography;

/**
 * Typographs encapsulate type styles with support for a specific font, font size,
 * and color. More typograph properties are coming soon.
 *
 */
class Images {
  constructor({
  } = {}) {
  }
}


module.exports.Images = Images;

/**
 * Here we create a custom reusable component for describing layout margins.
 *
 */
class Margin {
  constructor({
    top,
    bottom,
    left,
    right
  }) {
    /**
     * Defining the interface of your component's data enables you to instantiate your own
     * reusable components.
     *
     * 40
     */
    this.top = top;
    /**
     * Defining the interface of your component's data enables you to instantiate your own
     * reusable components.
     *
     * 10
     */
    this.bottom = bottom;
    /**
     * Defining the interface of your component's data enables you to instantiate your own
     * reusable components.
     *
     * 10
     */
    this.left = left;
    /**
     * Defining the interface of your component's data enables you to instantiate your own
     * reusable components.
     *
     * 10
     */
    this.right = right;
  }
}


module.exports.Margin = Margin;

/**
 * You can even collect your own custom components.
 *
 */
class LayoutValues {
  constructor({
    spacingSmall = 8,
    spacingMedium = 32,
    spacingLarge = 64,
    contentMargin = {top: 40, bottom: 10, left: 10, right: 10}
  } = {}) {
    /**
     * 8
     */
    this.spacingSmall = spacingSmall;
    /**
     * 32
     */
    this.spacingMedium = spacingMedium;
    /**
     * 64
     */
    this.spacingLarge = spacingLarge;
    /**
     * - top: `40`
     * - bottom: `10`
     * - left: `10`
     * - right: `10`
     */
    this.contentMargin = new Margin(contentMargin);
  }
}


module.exports.LayoutValues = LayoutValues;

/**
 * You can also define strings.
 *
 */
class Strings {
  constructor({
    title = "Diez",
    caption = "Keep your designs in sync with code",
    helper = "Please Modify the contents of “src/DesignLanguage.ts”.",
    fontFamilies = "'Montserrat-SemiBold', 'Montserrat-Bold', 'Inter-Medium', 'Inter-SemiBold', 'Inter-Regular', 'Inter-Bold', sans-serif"
  } = {}) {
    /**
     * Diez
     */
    this.title = title;
    /**
     * Keep your designs in sync with code
     */
    this.caption = caption;
    /**
     * Please Modify the contents of “src/DesignLanguage.ts”.
     */
    this.helper = helper;
    /**
     * 'Montserrat-SemiBold', 'Montserrat-Bold', 'Inter-Medium', 'Inter-SemiBold', 'Inter-Regular', 'Inter-Bold', sans-serif
     */
    this.fontFamilies = fontFamilies;
  }
}


module.exports.Strings = Strings;

class Shadows {
  constructor({
  } = {}) {
  }
}


module.exports.Shadows = Shadows;

/**
 * Note how this component is exported from `index.ts`. Diez compiles these
 * exported components for your apps' codebases.
 * 
 * For example:
 *    - If you run `yarn start web` or `npm run start web`, Diez will create a Node package called
 *      `diez-dashboard-web`. Look for `App.jsx` inside `examples/web` to see
 *      how you can use Diez in a web codebase.
 *    - If you run `yarn start ios` or `npm run start ios`, Diez will create a CocoaPods dependency
 *      called `DiezDashboard`. Look for `ViewController.swift` inside
 *      `examples/ios` to see how you can use Diez in an iOS codebase.
 *    - If you run `yarn start android` or `npm run start android`, Diez will create an Android library.
 *      Look for `MainActivity.kt` inside `examples/android` to see how you can
 *      use Diez in an Android codebase.
 *
 */
class DesignLanguage {
  constructor({
    palette = {},
    typography = {},
    images = {},
    layoutValues = {},
    strings = {},
    shadows = {}
  } = {}) {
    this.palette = new Palette(palette);
    this.typography = new DesignTypography(typography);
    this.images = new Images(images);
    this.layoutValues = new LayoutValues(layoutValues);
    this.strings = new Strings(strings);
    this.shadows = new Shadows(shadows);
  }
}

Object.defineProperty(DesignLanguage, 'name', {value: 'DesignLanguage'});

module.exports.DesignLanguage = DesignLanguage;

